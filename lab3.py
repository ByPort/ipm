# -*- coding: utf-8 -*-
"""mzi3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fur3TI6ej118Qc7_EZzCO7YaoiPKUtRY
"""

import sympy as sp

p = sp.randprime(257, 2**64)
q = p
while q == p:
  q = sp.randprime(257, 2**64)

p, q, sp.isprime(p), sp.isprime(q)

n = p * q
phi = (p - 1) * (q - 1)

n, phi

import math
import random

e = phi
while math.gcd(e, phi) != 1:
  e = random.randint(2, phi - 1)

e

def egcd(a, b):
  if a == 0:
    return (b, 0, 1)
  g, y, x = egcd(b % a, a)
  return (g, x - (b // a) * y, y)

def modinv(a, m):
  g, x, y = egcd(a, m)
  if g != 1:
    raise Exception('No modular inverse')
  return x % m

d = modinv(e, phi)

d, d * e % phi

pubkey = (e, n)
privkey = (d, n)

pubkey, privkey

message = 'Hello world! This is RSA :)'

encrypted = [pow(m, e, n) for m in message.encode('utf-8')]

encrypted

decrypted = bytes(pow(c, d, n) for c in encrypted).decode('utf-8')

decrypted